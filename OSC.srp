#proj5.srp - 15-323 Project 5, using OSC sources
#Nina Edwards, Professor Roger Dannenberg

require "debug"
require "sched"
require "midi-io"
require "prefs"
require "mididevice"

APPLICATION = "proj5_NGE728"
SERVICE = "proj5_NGE728"

def full(osc_path):
    return "/" + SERVICE + osc_path
    #makes full O2 path based on SERVICE

o2_initialize(APPLICATION, false)
o2_service_new(SERVICE)
o2_clock_set()
PORT = 8037
result = o2_osc_port_new("proj5_NGE728", PORT, false)
if result != 0:
    display "ERROR"
else:
    print "Listening for TouchOSC messages on port", PORT


# Statictext(0, "This window is left intentionally blank.", 20, 5, 300, 30)

#installing handlers

o2_method_new(full("/1/toggle1"), "f", 'toggle1_p1', true)
o2_method_new(full("/1/toggle2"), "f", 'toggle2_p1', true)
o2_method_new(full("/1/toggle3"), "f", 'toggle3_p1', true)
o2_method_new(full("/1/toggle4"), "f", 'toggle4_p1', true)

o2_method_new(full("/1/fader1"), "f", 'fader1', true)
o2_method_new(full("/1/fader2"), "f", 'fader2', true)
o2_method_new(full("/1/fader3"), "f", 'fader3', true)
o2_method_new(full("/1/fader4"), "f", 'fader4', true)
o2_method_new(full("/1/fader5"), "f", 'fader5', true)

o2_method_new(full("/2/toggle1"), "f", 'toggle1_p2', true)
o2_method_new(full("/2/toggle2"), "f", 'toggle2_p2', true)
o2_method_new(full("/2/toggle3"), "f", 'toggle3_p2', true)
o2_method_new(full("/2/toggle4"), "f", 'toggle4_p2', true)

o2_method_new(full("/2/push1"), "f", 'push1', true)
o2_method_new(full("/2/push2"), "f", 'push2', true)
o2_method_new(full("/2/push3"), "f", 'push3', true)
o2_method_new(full("/2/push4"), "f", 'push4', true)
o2_method_new(full("/2/push5"), "f", 'push5', true)
o2_method_new(full("/2/push6"), "f", 'push6', true)
o2_method_new(full("/2/push7"), "f", 'push7', true)
o2_method_new(full("/2/push8"), "f", 'push8', true)
o2_method_new(full("/2/push9"), "f", 'push9', true)
o2_method_new(full("/2/push10"), "f", 'push10', true)
o2_method_new(full("/2/push11"), "f", 'push11', true)
o2_method_new(full("/2/push12"), "f", 'push12', true)
o2_method_new(full("/2/push13"), "f", 'push13', true)
o2_method_new(full("/2/push14"), "f", 'push14', true)
o2_method_new(full("/2/push15"), "f", 'push15', true)
o2_method_new(full("/2/push16"), "f", 'push16', true)

# PAGE 1

def toggle1_p1(timestamp, address, types, val):
    if val == 1:
        display "Toggle 1 on page 1 selected."
    else:
        display "Toggle 1 on page 1 deselected."

def toggle2_p1(timestamp, address, types, val):
    if val == 1:
        display "Toggle	2 on page 1 selected."
    else:
        display "Toggle	2 on page 1 deselected."

def toggle3_p1(timestamp, address, types, val):
    if val == 1:
        display "Toggle	3 on page 1 selected."
    else:
        display "Toggle	3 on page 1 deselected."

def toggle4_p1(timestamp, address, types, val):
    if val == 1:
        display "Toggle	4 on page 1 selected."
    else:
        display "Toggle	4 on page 1 deselected."

def fader1(timestamp, address, types, val):
    global_velocity = val
    display "Adjusting fader1 val to", val

def fader2(timestamp, address, types, val):
    display "Adjusting fader2 val to", val

def fader3(timestamp, address, types, val):
    display "Adjusting fader3 val to", val

def fader4(timestamp, address, types, val):
    display "Adjusting fader4 val to", val

def fader5(timestamp, address, types, val):
    display "Adjusting fader5 val to", val

# PAGE 2

def push1(timestamp, address, types, val)
    if val == 1:
        display "push1 pressed"

def push2(timestamp, address, types, val)
    if val == 1:
        display "push2 pressed"

def push3(timestamp, address, types, val)
    if val == 1:
        display "push3 pressed"

def push4(timestamp, address, types, val)
    if val == 1:
        display "push4 pressed"

def push5(timestamp, address, types, val)
    if val == 1:
        display "push5 pressed"

def push6(timestamp, address, types, val)
    if val == 1:
        display "push6 pressed"

def push7(timestamp, address, types, val)
    if val == 1:
        display "push7 pressed"

def push8(timestamp, address, types, val)
    if val == 1:
        display "push8 pressed"

def push9(timestamp, address, types, val)
    if val == 1:
        display "push9 pressed"

def push10(timestamp, address, types, val)
    if val == 1:
        display "push10 pressed"

def push11(timestamp, address, types, val)
    if val == 1:
        display "push11 pressed"

def push12(timestamp, address, types, val)
    if val == 1:
        display "push12 pressed"

def push13(timestamp, address, types, val)
    if val == 1:
        display "push13 pressed"

def push14(timestamp, address, types, val)
    if val == 1:
        display "push14 pressed"

def push15(timestamp, address, types, val)
    if val == 1:
        display "push15 pressed"

def push16(timestamp, address, types, val)
    if val == 1:
        display "push16 pressed"

def toggle1_p2(timestamp, address, types, val):
    if val == 1:
        display "Toggle 1 on page 2 selected."
    else:
        display "Toggle 1 on page 2 deselected."

def toggle2_p2(timestamp, address, types, val):
    if val == 1:
        display "Toggle 2 on page 2 selected."
    else:
        display "Toggle 2 on page 2 deselected."

def toggle3_p2(timestamp, address, types, val):
    if val == 1:
        display "Toggle 3 on page 2 selected."
    else:
        display "Toggle 3 on page 2 deselected."

def toggle4_p2(timestamp, address, types, val):
    if val == 1:
        display "Toggle 4 on page 2 selected."
    else:
        display "Toggle 4 on page 2 deselected."

# PLAYING PIANO

def play_piano(cur_chord):
    for i=0 to 12:
        if (cur_chord[i] == "t")
            midi_out.note(0, octave + scale + i % 12, vol, dur)

sched_init()
prefs = Prefs("./prefs.txt")
midi_devices = Midi_devices(prefs, open_later = true)
success = midi_devices.open_midi(latency = 10, device = 'midi_out_device')
if not success
    print "Please select a valid output device and restart"
else
    sched_select(vtsched)
sched_o2_enabled = true
