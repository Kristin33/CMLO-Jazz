# playerdemo.srp - example of a bare-bones player
#
# Roger B. Dannenberg
# March 2017

# IMPORTANT: SERVICE must be defined before you load playerbase.srp:
SERVICE = "MNK_Drum"

# Now load playerbase.srp
require "drum_playerbase.srp"
require "drum_phrases.srp"
require "../TouchOSC.srp"

# phrase stores the information of which music phrase (template) we are 
# currently on, since usually a lick occupies several measures, we 
# definitely want several measures to form a complete phrase. 
# cur_instrument_phrase - [phrase template name, which measure it's on]
drum_phrases = [[drum_phrase_20, drum_phrase_20, drum_phrase_20, drum_phrase_20]
              , [drum_phrase_30]
              , [drum_phrase_40, drum_phrase_41, drum_phrase_42, drum_phrase_42]
              , [drum_phrase_50]]

# default: 4/4 beat swing
cur_drum_phrase = [drum_phrases[2][0], 0]

# whether we manually setted the phrase 
# [bool, int] int is either 0 1 2 3
set_phrase = [false, 0]


def pick_new_phrase(bpmeasure)
    # get the possible phrases by the given beat per measure
    # have options 2, 3, 4, 5, 6
    phrase_of_beats = drum_phrases[bpmeasure - 2]

    n = len(phrase_of_beats)

    return phrase_of_beats[int(random()*n)]


// some simple music generation: Here are some problems with this:
// - not very interesting
// - no manual control of anything
// - does everything: bass, chord, melody, instead of one thing
// - all piano sounds
// - cannot handle cur_beats_per_measure properly (assumes 4)
// - plays absurdly fast at faster tempos
//
def play_a_measure()

    # compute a measure using these variables:
    #    cur_style - a symbol representing style to play (if
    #       this is not your style, do not play)
    #    cur_start_beat - what beat to start on if you are stopped
    #    cur_stop_beat - what beat to stop on if you have started (you can
    #       stop slightly late; generally you should not start any notes 
    #       at or after tm_stop_beat but you can play a short note on 
    #       tm_stop_beat if it is stylistically sensible.)
    #    cur_beats_per_measure - the current time signature as an integer
    #    cur_bps - current beats per second (the vtsched will implement this
    #       but reading the vtsched timemap slope is not reliable because
    #       vtsched may be updated instantaneously after this call.
    #    cur_scale - boolean array representing current scale
    #    cur_chord - boolean array representing current chord
    #    cur_bass - integer representing root of chord
    #
    display "play_a_measure", cur_beats_per_measure, cur_bps
    display "    ", cur_scale, cur_chord, cur_bass
    # Use EPSILON here because comparing floats for equality is not
    #   reliable without very difficult analysis. So, instead of
    #   x >= y, we write x + EPSILON > y
    if cur_style == 'rock'

        # get the current measure based on the cur_instr_phrase 
        drum_measure = cur_drum_phrase[0][cur_drum_phrase[1]]

        # TODO:
        # - Add touchOSC control for drum patterns


        ######### play drum ##################

        # play drum by the library, note that it's in channel 10
        sched_select(vtsched)
        for note in drum_measure
            sched_cause(note[1], midi_out, 'note', 9, note[0], 60, 0.3)


        # update the cur_drum_phrase by incrementing the measure
        # if we finished this phrase, find the next phrase (either randomly or by a probability)
        var drum_phrase_length = len(cur_drum_phrase[0])
        if cur_drum_phrase[1] + 1 == drum_phrase_length 
            if set_phrase[0] == false
                cur_drum_phrase = [pick_new_phrase(cur_beats_per_measure), 0]
            else 
                cur_drum_phrase = [drum_phrases[2][set_phrase[1]], 0]
        else 
            cur_drum_phrase = [cur_drum_phrase[0], cur_drum_phrase[1] + 1]



